#include <iostream>;
#include <locale>
using namespace std;


int* bubbleSorting(int bubbleSortingArr[1013], int size) {
  for (int i = 0; i < size; i++) {
    for (int j = 0; j < size - i - 1; j++) {
      if (bubbleSortingArr[j] > bubbleSortingArr[j + 1]) {
        int t = bubbleSortingArr[j];
        bubbleSortingArr[j] = bubbleSortingArr[j + 1];
        bubbleSortingArr[j + 1] = t;
      }
    }
  }
  return bubbleSortingArr;
}

void task1() {
  int bubbleNotSortingArr[1013];
  int* sortingArrBubble;

  int size;
  do { 
    cout << "������� ������: " << endl;
    cin >> size;
    if (size < 0) {
      cout << "������ ������ ���� ������������� ������";
    }
  } while (size < 0);

  for (int i = 0; i < size; i++) {
    cout << "������� �����: " << endl;
    cin >> bubbleNotSortingArr[i];
  }
  cout << "������ ��������������� ����������� �����������: " << endl;

  sortingArrBubble = bubbleSorting(bubbleNotSortingArr, size);

  for (int i = 0; i < size; i++) {
    cout << sortingArrBubble[i] << '\t';
  }
  cout << endl;
}

char* sortingByCounting(char byCountingNotSortingArr[1013], int size) {
  const int numberOfDifferentElements = 26;
  int counting[numberOfDifferentElements] = { 0 };
  int j;
  for (int i = 0; i < size; i++) {
    j = (int)(byCountingNotSortingArr[i] - 'a');
    counting[j]++;
  }
  j = 0;
  int i = 0;
  while (j <= numberOfDifferentElements) {
    if (counting[j] > 0) {
      byCountingNotSortingArr[i] = (char)((int)('a') + j);
      i++;
      counting[j]--;
    }
    else {
      j++;
    }
  }
  return byCountingNotSortingArr;
}

void task2() {
  char byCountingNotSortingArr[1013]; 
  char* sortingArrByCounting;

  int size;
  do { 
    cout << "������� ������: " << endl;
    cin >> size;
    if (size < 0) {
      cout << "������ ������ ���� ������������� ������";
    }
  } while (size < 0);

  for (int i = 0; i < size; i++) {
    cout << "������� ������: " << endl;
    cin >> byCountingNotSortingArr[i];
  }
  cout << "������ ��������������� ���������� �����������: " << endl;

  sortingArrByCounting = sortingByCounting(byCountingNotSortingArr, size);

  for (int i = 0; i < size; i++) {
    cout << sortingArrByCounting[i] << '\t';
  }
  cout << endl;
}

void Merge(int* sortingArrMerge, int left, int right) {
  int middle, beginningOfLeftPart, beginningOfRightPart;
  int* mas = new int[1013];

  middle = (left + right) / 2;
  beginningOfLeftPart = left;
  beginningOfRightPart = middle + 1;

  for (int j = left; j <= right; j++) {
    if ((beginningOfLeftPart <= middle) && ((beginningOfRightPart > right) || (sortingArrMerge[beginningOfLeftPart] < sortingArrMerge[beginningOfRightPart]))) {
      mas[j] = sortingArrMerge[beginningOfLeftPart];
      beginningOfLeftPart++;
    }
    else {
      mas[j] = sortingArrMerge[beginningOfRightPart];
      beginningOfRightPart++;
    }
  }

  for (int j = left; j <= right; j++) {
    sortingArrMerge[j] = mas[j];
  }
}

void MergeSorting(int* sortingArrMerge, int left, int right) {
  if (left < right) {
    int middle = (left + right) / 2;
    MergeSorting(sortingArrMerge, left, middle); 
    MergeSorting(sortingArrMerge, middle + 1, right); 
    Merge(sortingArrMerge, left, right); 
  }
}

void task3() {
  int* sortingArrMerge = new int[1013]; 

  int size;
  do { 
    cout << "������� ������: " << endl;
    cin >> size;
    if (size < 0) {
      cout << "������ ������ ���� ������������� ������";
    }
  } while (size < 0);

  for (int i = 1; i <= size; i++) {
    cout << "������� �����: " << endl;
    cin >> sortingArrMerge[i];
  }
  cout << "������ ��������������� ����������� �������: " << endl;

  MergeSorting(sortingArrMerge, 1, size);

  for (int i = 1; i <= size; i++) {
    cout << sortingArrMerge[i] << '\t';
  }
  cout << endl;
}
